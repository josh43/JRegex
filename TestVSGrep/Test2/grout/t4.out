Test.h:include
vector
Test.h:reated
by
joshua
on
Test.h:ifndef
Test.h:define
Test.h:endif
Test.h:reated
by
joshua
on
Test.h:include
vector
Test.h:include
arser
egular
ree
odes
h
Test.h:include
set
Test.h:include
ata
tructures
h
Test.h:namespace
asy
Test.h:class
ertex
Test.h:using
namespace
std
Test.h:struct
dge
Test.h:static
const
unsigned
char
Test.h:dge
unsigned
char
data
Test.h:val
data
Test.h:v
nullptr
v
s
psilon
false
Test.h:v
nullptr
v
s
psilon
false
Test.h:dge
Test.h:v
nullptr
Test.h:v
nullptr
Test.h:unsigned
char
val
Test.h:ertex
v
Test.h:bool
v
s
psilon
Test.h:ertex
v
Test.h:bool
v
s
psilon
Test.h:struct
ertex
Test.h:ertex
ertex
dge
Test.h:ertex
unsigned
char
data
Test.h:is
ccepting
visited
false
Test.h:edge
new
dge
data
Test.h:pair
ertex
ertex
on
ransition
unsigned
char
x
Test.h:for
dge
edge
edge
ist
Test.h:if
edge
val
x
Test.h:return
pair
edge
v
edge
v
Test.h:else
if
edge
epsilon
Test.h:return
edge
v
nullptr
Test.h:return
nullptr
nullptr
Test.h:static
void
print
ertex
ertex
v
Test.h:printf
ertex
p
is
ccepting
s
n
v
v
is
ccepting
Test.h:printf
t
dge
c
v
edge
val
Test.h:printf
t
dge
v
p
v
edge
v
is
psilon
s
n
v
edge
v
v
edge
v
s
psilon
Test.h:printf
t
dge
v
p
v
edge
v
is
psilon
s
n
v
edge
v
v
edge
v
s
psilon
Test.h:printf
n
Test.h:static
ertex
dfs
ertex
curr
unsigned
char
x
int
depth
vector
ertex
to
eset
bool
verbose
false
Test.h:if
curr
return
nullptr
Test.h:if
curr
visited
if
verbose
printf
lready
visited
p
returning
n
curr
return
nullptr
Test.h:if
depth
return
nullptr
printf
an
out
of
depth
returning
n
Test.h:curr
visited
true
Test.h:to
eset
push
back
curr
Test.h:print
ertex
curr
Test.h:if
on
ransition
x
first
nullptr
Test.h:dfs
on
ransition
x
first
x
depth
to
eset
Test.h:if
curr
edge
nullptr
throw
std
invalid
argument
dge
was
null
need
to
initalize
Test.h:if
curr
edge
val
x
Test.h:printf
ound
x
at
p
returning
vertex
p
n
curr
curr
edge
v
Test.h:ertex
reset
erts
to
eset
Test.h:return
curr
edge
v
Test.h:else
Test.h:printf
earching
at
p
v
p
n
curr
curr
edge
v
Test.h:ertex
res
dfs
curr
edge
v
depth
x
to
eset
Test.h:if
res
nullptr
Test.h:printf
earching
at
p
v
p
n
curr
curr
edge
v
Test.h:return
dfs
curr
edge
v
depth
x
to
eset
Test.h:else
Test.h:return
nullptr
Test.h:static
void
reset
erts
vector
ertex
to
eset
Test.h:for
ertex
v
to
eset
Test.h:v
visited
false
Test.h:bool
is
ccepting
Test.h:bool
visited
Test.h:dge
edge
Test.h:class
egular
raph
Test.h:public
Test.h:static
pair
ertex
ertex
get
raph
rom
egular
ode
tack
reg
tack
Test.h:stack
pair
ertex
ertex
vert
tack
Test.h:if
reg
tack
is
mpty
Test.h:throw
std
invalid
argument
ou
need
to
at
least
have
on
character
for
matching
a
regexp
Test.h:do
Test.h:ertex
head
new
ertex
dge
Test.h:ertex
curr
head
Test.h:egular
ode
node
reg
tack
pop
the
first
regularnode
can
determine
if
the
whole
epxression
is
Test.h:star
d
plus
d
or
questioned
Test.h:unsigned
int
type
node
node
ype
Test.h:if
type
Test.h:add
all
data
to
this
Test.h:if
node
regular
ata
Test.h:curr
edge
val
node
regular
ata
front
Test.h:node
node
left
Test.h:while
node
Test.h:curr
edge
v
new
ertex
node
regular
ata
front
Test.h:special
xpression
type
curr
curr
edge
v
Test.h:curr
curr
edge
v
Test.h:node
node
left
Test.h:curr
edge
v
new
ertex
Test.h:special
xpression
type
head
curr
edge
v
Test.h:vert
tack
push
head
curr
edge
v
Test.h:else
if
type
Test.h:pair
ertex
ertex
last
get
ata
ode
rom
node
right
Test.h:node
node
left
Test.h:while
node
node
ype
Test.h:pair
ertex
ertex
or
ode
get
ata
ode
rom
node
right
Test.h:last
or
xpressions
last
or
ode
Test.h:node
node
left
Test.h:pair
ertex
ertex
or
ode
get
ata
ode
rom
node
Test.h:last
or
xpressions
last
or
ode
Test.h:head
last
first
curr
last
second
Test.h:curr
last
second
Test.h:special
xpression
type
head
curr
Test.h:vert
tack
push
head
curr
Test.h:else
Test.h:throw
std
invalid
argument
ust
either
be
a
data
node
or
an
n
Test.h:curr
add
ransition
Test.h:while
reg
tack
is
mpty
Test.h:printf
ompletion
n
Test.h:ertex
to
eturn
Test.h:if
vert
tack
empty
Test.h:throw
std
invalid
argument
ou
cannot
have
a
null
regular
expression
Test.h:to
eturn
vert
tack
top
first
Test.h:ertex
curr
vert
tack
top
second
Test.h:vert
tack
pop
Test.h:while
vert
tack
empty
Test.h:pair
ertex
ertex
next
vert
tack
top
Test.h:if
curr
edge
v
Test.h:throw
std
invalid
argument
annot
have
the
second
vertex
set
when
bridging
Test.h:curr
edge
v
s
psilon
true
Test.h:curr
edge
v
next
first
Test.h:curr
next
second
Test.h:vert
tack
pop
Test.h:return
pair
ertex
ertex
to
eturn
curr
Test.h:static
pair
ertex
ertex
or
xpressions
pair
ertex
ertex
one
pair
ertex
ertex
two
Test.h:ertex
start
new
ertex
start
edge
v
s
psilon
true
start
edge
v
s
psilon
true
Test.h:ertex
end
new
ertex
one
second
edge
v
s
psilon
true
two
second
edge
v
s
psilon
true
Test.h:start
edge
v
one
first
start
edge
v
two
first
Test.h:one
second
edge
v
end
two
second
edge
v
end
Test.h:return
std
pair
ertex
ertex
start
end
Test.h:static
void
special
xpression
unsigned
int
type
ertex
start
ertex
end
Test.h:if
end
nullptr
throw
std
invalid
argument
nd
needs
to
not
be
nullptr
Test.h:if
type
Test.h:if
end
edge
end
edge
v
Test.h:throw
std
invalid
argument
his
should
not
occur
Test.h:end
edge
v
s
psilon
true
Test.h:end
edge
v
start
Test.h:else
if
type
Test.h:if
end
edge
v
end
edge
v
Test.h:throw
std
invalid
argument
he
nd
should
not
have
any
edges
Test.h:ertex
new
tart
new
ertex
Test.h:ertex
new
nd
new
ertex
Test.h:new
tart
edge
v
s
psilon
true
Test.h:new
tart
edge
v
s
psilon
true
Test.h:new
tart
edge
v
start
new
tart
edge
v
new
nd
Test.h:end
edge
v
s
psilon
true
Test.h:end
edge
v
s
psilon
true
Test.h:end
edge
v
new
nd
Test.h:end
edge
v
new
tart
Test.h:start
new
tart
Test.h:end
new
nd
Test.h:else
if
type
Test.h:if
end
edge
v
end
edge
v
Test.h:throw
std
invalid
argument
he
nd
should
not
have
any
edges
Test.h:ertex
new
tart
new
ertex
Test.h:new
tart
edge
v
s
psilon
true
Test.h:new
tart
edge
v
s
psilon
true
Test.h:new
tart
edge
v
start
new
tart
edge
v
end
Test.h:start
new
tart
Test.h:else
do
nothing
Test.h:static
pair
ertex
ertex
get
ata
ode
rom
egular
ode
node
Test.h:ertex
start
new
ertex
Test.h:ertex
curr
start
Test.h:if
node
regular
ata
Test.h:curr
edge
val
node
regular
ata
front
Test.h:curr
curr
edge
v
Test.h:node
node
left
Test.h:node
node
left
Test.h:while
node
Test.h:curr
edge
v
new
ertex
node
regular
ata
front
Test.h:special
xpression
type
curr
curr
edge
v
Test.h:curr
curr
edge
v
Test.h:node
node
left
Test.h:while
node
node
node
ype
Test.h:curr
edge
v
new
ertex
node
regular
ata
front
Test.h:special
xpression
node
node
ype
curr
curr
edge
v
Test.h:curr
curr
edge
v
Test.h:node
node
left
Test.h:if
curr
nullptr
start
edge
v
nullptr
Test.h:start
edge
v
new
ertex
Test.h:curr
start
edge
v
Test.h:else
Test.h:curr
edge
v
new
ertex
dge
Test.h:return
std
pair
ertex
ertex
start
curr
Test.h:private
Test.h:egular
raph
Test.h:class
psilon
Test.h:public
Test.h:ertex
start
ertex
end
Test.h:psilon
ertex
s
ertex
e
start
s
end
e
Test.h:bool
match
std
string
str
bool
verbose
false
Test.h:vector
pair
string
int
matches
Test.h:unsigned
int
current
ndex
Test.h:set
ertex
last
losure
Test.h:last
losure
insert
start
Test.h:unsigned
int
start
ndex
Test.h:while
current
ndex
str
length
Test.h:set
ertex
closure
Test.h:if
str
current
ndex
Test.h:str
current
ndex
std
numeric
limits
unsigned
char
min
str
current
ndex
Test.h:if
can
ransition
n
str
current
ndex
last
losure
closure
Test.h:transition
closure
str
current
ndex
Test.h:if
found
nd
closure
end
Test.h:matches
push
back
str
substr
start
ndex
current
ndex
start
ndex
start
ndex
Test.h:last
losure
closure
Test.h:else
reset
because
not
in
a
valid
state
Test.h:start
ndex
current
ndex
Test.h:last
losure
clear
Test.h:last
losure
insert
start
Test.h:current
ndex
Test.h:if
verbose
Test.h:for
pair
string
int
match
matches
Test.h:printf
atch
ound
s
i
n
match
first
c
str
match
second
Test.h:return
matches
size
Test.h:bool
can
ransition
n
unsigned
char
letter
const
set
ertex
last
losure
set
ertex
new
losure
Test.h:set
ertex
temp
last
losure
Test.h:for
ertex
v
last
losure
Test.h:set
ertex
returned
epsilon
losure
v
Test.h:temp
insert
returned
begin
returned
end
Test.h:for
ertex
v
temp
Test.h:v
visited
false
Test.h:bool
can
ransition
false
Test.h:for
ertex
v
temp
Test.h:if
v
edge
val
letter
Test.h:if
v
edge
v
Test.h:new
losure
insert
v
edge
v
Test.h:else
Test.h:it
must
have
been
the
end
Test.h:new
losure
insert
v
edge
v
Test.h:can
ransition
true
Test.h:temp
clear
Test.h:for
ertex
v
new
losure
out
of
the
ones
you
can
transition
to
Test.h:you
must
compute
the
closure
for
every
vertex
Test.h:set
ertex
returned
epsilon
losure
v
Test.h:temp
insert
returned
begin
returned
end
Test.h:new
losure
std
move
temp
Test.h:return
can
ransition
Test.h:set
ertex
epsilon
losure
ertex
the
ertex
Test.h:set
ertex
verts
Test.h:closure
elper
the
ertex
verts
Test.h:for
auto
v
verts
Test.h:v
visited
false
Test.h:return
verts
Test.h:void
closure
elper
ertex
v
set
ertex
vert
ist
Test.h:if
v
nullptr
return
Test.h:if
v
visited
return
Test.h:v
visited
true
Test.h:vert
ist
insert
v
Test.h:if
v
edge
v
s
psilon
v
edge
val
dge
Test.h:closure
elper
v
edge
v
vert
ist
Test.h:if
v
edge
v
s
psilon
v
edge
val
dge
Test.h:closure
elper
v
edge
v
vert
ist
Test.h:bool
found
nd
set
ertex
closure
ertex
end
Test.h:for
auto
x
closure
Test.h:if
x
end
Test.h:return
true
Test.h:return
false
Test.h:endif
